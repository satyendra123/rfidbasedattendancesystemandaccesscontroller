# i have a module rfid which is used in door access controller. i want to read the data of this reader then how would i do that. so there are two ways to do it. if any reader whether it is UHF rfid, rfid card so in which we have D0 and D1 pin in that means we can integrate it with my esp32 uart pin rx and tx. also we can use the wiegand library
# the same code will be used with the UHF rfid to read the wiegand protocol
#EXAMPLE-1  using the wiegand library

#include <Wiegand.h>
WIEGAND wg;
#define D0_PIN 16  // Replace with your GPIO pin number for D0
#define D1_PIN 17  // Replace with your GPIO pin number for D1

void setup() {
  Serial.begin(9600);

  // Initialize the Wiegand reader with D0 and D1 pins
  wg.begin(D0_PIN, D1_PIN);
}

void loop() {
  if (wg.available()) {
    Serial.print("Wiegand HEX = ");
    Serial.print(wg.getCode(), HEX);
    Serial.print(", DECIMAL = ");
    Serial.print(wg.getCode());
    Serial.print(", Type W");
    Serial.println(wg.getWiegandType());
  }
}
*/
/*
EXAMPLE-2
#include <Wiegand.h>

WIEGAND wg;

void setup() {
Serial.begin(9600);

// default Wiegand Pin 2 and Pin 3 see image on README.md
// for non UNO board, use wg.begin(pinD0, pinD1) where pinD0 and pinD1
// are the pins connected to D0 and D1 of wiegand reader respectively.
wg.begin();
}

void loop() {
if(wg.available())
{
Serial.print("Wiegand HEX = ");
Serial.print(wg.getCode(),HEX);
Serial.print(", DECIMAL = ");
Serial.print(wg.getCode());
Serial.print(", Type W");
Serial.println(wg.getWiegandType());
}
}
*/

#define D0_PIN 16  // GPIO pin number for D0
#define D1_PIN 17  // GPIO pin number for D1

#define MAX_BITS 100                 // max number of bits 
#define WEIGAND_WAIT_TIME  3000      // time to wait for another weigand pulse
#define BIT_COUNT_26 26              // number of bits in Wiegand 26-bit format

unsigned char databits[MAX_BITS];    // stores all of the data bits
unsigned char bitCount;              // number of bits currently captured
unsigned char flagDone;              // goes low when data is currently being captured
unsigned int weigand_counter;        // countdown until we assume there are no more bits

unsigned long facilityCode = 0;      // decoded facility code
unsigned long cardCode = 0;          // decoded card code

// Constants for Wiegand 26-bit format
#define FC_BITS_26_START 1            // start bit index for facility code
#define FC_BITS_26_END 8              // end bit index for facility code (inclusive)
#define CC_BITS_26_START 9            // start bit index for card code
#define CC_BITS_26_END 24             // end bit index for card code (inclusive)

// interrupt that happens when D0 goes low (0 bit)
void ISR_D0()
{
  //Serial.print("0");   // uncomment this line to display raw binary
  bitCount++;
  flagDone = 0;
  weigand_counter = WEIGAND_WAIT_TIME;
}

// interrupt that happens when D1 goes low (1 bit)
void ISR_D1()
{
  //Serial.print("1");   // uncomment this line to display raw binary
  databits[bitCount] = 1;
  bitCount++;
  flagDone = 0;
  weigand_counter = WEIGAND_WAIT_TIME;
}

void setup()
{
  pinMode(13, OUTPUT);  // LED
  pinMode(D0_PIN, INPUT);  // DATA0 (D0)
  pinMode(D1_PIN, INPUT);  // DATA1 (D1)

  Serial.begin(9600);
  Serial.println("RFID Readers");

  // Attach interrupts to the falling edge of D0 and D1
  attachInterrupt(digitalPinToInterrupt(D0_PIN), ISR_D0, FALLING);
  attachInterrupt(digitalPinToInterrupt(D1_PIN), ISR_D1, FALLING);

  weigand_counter = WEIGAND_WAIT_TIME;
}

void loop()
{
  // Wait to ensure there have been no more data pulses before processing data
  if (!flagDone) {
    if (--weigand_counter == 0)
      flagDone = 1;	
  }

  // Process captured bits if enough bits are captured and no more pulses detected
  if (bitCount > 0 && flagDone) {
    unsigned char i;

    Serial.print("Read ");
    Serial.print(bitCount);
    Serial.print(" bits. ");

    // Decode the bits based on the number of bits received
    if (bitCount == BIT_COUNT_26)
    {
      // Decode Wiegand 26-bit format
      // facility code = bits 2 to 9
      for (i = FC_BITS_26_START; i <= FC_BITS_26_END; i++)
      {
         facilityCode <<= 1;
         facilityCode |= databits[i];
      }

      // card code = bits 10 to 25
      for (i = CC_BITS_26_START; i <= CC_BITS_26_END; i++)
      {
         cardCode <<= 1;
         cardCode |= databits[i];
      }

      printBits();
    }
    else {
      Serial.println("Unable to decode."); 
    }

    // Reset for next card read
    bitCount = 0;
    facilityCode = 0;
    cardCode = 0;
    for (i = 0; i < MAX_BITS; i++) 
    {
      databits[i] = 0;
    }
  }
}

void printBits()
{
  // Print the decoded facility code and card code
  Serial.print("FC = ");
  Serial.print(facilityCode);
  Serial.print(", CC = ");
  Serial.println(cardCode); 
}

#Step-2 without using the wiegand library in esp32 micropython
from machine import UART, Pin
import time

uart = UART(1, baudrate=115200, tx=16, rx=17)

while True:
    if uart.any():
        tag = uart.read()
        large_number = int.from_bytes(tag, 'big')
        print(large_number)
    time.sleep(0.5)

#EXAMPLE-4 this is the rfid access controller module to get the wiegand data and trigger the relay based on the card


#define MAX_BITS 100                 // max number of bits 
#define WEIGAND_WAIT_TIME  3000      // time to wait for another weigand pulse.  
unsigned char databits[MAX_BITS];    // stores all of the data bits
unsigned char bitCount;              // number of bits currently captured
unsigned char flagDone;              // goes low when data is currently being captured
unsigned int weigand_counter;        // countdown until we assume there are no more bits

unsigned long facilityCode=0;        // decoded facility code
unsigned long cardCode=0;            // decoded card code
int Relay = 11;
// interrupt that happens when INTO goes low (0 bit)
void ISR_INT0()
{
  //Serial.print("0");   // uncomment this line to display raw binary
  bitCount++;
  flagDone = 0;
  weigand_counter = WEIGAND_WAIT_TIME;  
  
}

// interrupt that happens when INT1 goes low (1 bit)
void ISR_INT1()
{
  
  databits[bitCount] = 1;
  bitCount++;
  flagDone = 0;
  weigand_counter = WEIGAND_WAIT_TIME;  
}

void setup()
{
  pinMode(Relay, OUTPUT);  
  digitalWrite(Relay, HIGH);  // Low = On
  pinMode(2, INPUT);     // DATA0 (INT0)
  pinMode(3, INPUT);     // DATA1 (INT1)
  
  Serial.begin(9600);
  Serial.println("RFID Readers & Arduino Access Door");
  Serial.println("---------By Andum Kawruh----------");
  Serial.println();
  // binds the ISR functions to the falling edge of INTO and INT1
  attachInterrupt(0, ISR_INT0, FALLING);  
  attachInterrupt(1, ISR_INT1, FALLING);

  weigand_counter = WEIGAND_WAIT_TIME;
}

void loop()
{
  
  if (!flagDone) {
    if (--weigand_counter == 0)
      flagDone = 1;	
  }
  
 
  if (bitCount > 0 && flagDone) {
    unsigned char i;
    
    Serial.print("Read ");
    Serial.print(bitCount);
    Serial.print(" bits. ");
    
    if (bitCount == 34)
    {
      // 35 bit HID Corporate 1000 format
      // facility code = bits 2 to 14
      for (i=2; i<14; i++)
      {
         facilityCode <<=1;
         facilityCode |= databits[i];
      }
      
      // card code = bits 15 to 34
      for (i=13; i<34; i++)
      {
         cardCode <<=1;
         cardCode |= databits[i];
      }
      
      printBits();
    }
    else if (bitCount == 26)
    {
      // standard 26 bit format
      // facility code = bits 2 to 9
      for (i=1; i<9; i++)
      {
         facilityCode <<=1;
         facilityCode |= databits[i];
      }
      
      // card code = bits 10 to 23
      for (i=9; i<25; i++)
      {
         cardCode <<=1;
         cardCode |= databits[i];
      }
      
      printBits();  
    }
    else {
      
      Serial.println("Unable to decode."); 
    }

     // cleanup and get ready for the next card
     bitCount = 0;
     facilityCode = 0;
     cardCode = 0;
     for (i=0; i<MAX_BITS; i++) 
     {
       databits[i] = 0;
     }
  }
}

void printBits()
{
      
      Serial.print("FC = ");
      Serial.print(facilityCode);
      Serial.print(", CC = ");
      Serial.println(cardCode); 
      Serial.println();
     if ((cardCode == 55471) || (cardCode == 55761)|| (cardCode == 36725) || (cardCode == 1556))

      {
        
        Serial.println("Akses Diijinkan");
        Serial.println("Pintu Terbuka");
        digitalWrite(Relay, LOW); 
        delay(3000);
        digitalWrite(Relay, HIGH); // Green back on
        Serial.println("Pintu Tertutup");
        Serial.println();
      }
      else {
            Serial.println("Access Ditolak!!!");
            Serial.println();
      }
}

#EXAMPLE-5 micropython code for read the rfid card but it is not giving me the correct value. from this link i am getting this code https://github.com/mcauser/micropython-hz1050/blob/master/readme.md 
from machine import UART
uart1 = UART(1, baudrate=9600, tx=14, rx=4)

# callback to run on detection
def cb(code, facility, card):
	print('Code: {}, Facility: {}, Card: {}'.format(code, facility, card))

# poll the uart
def uart_demo(callback):
	buf = bytearray(4)
	while True:
		if uart1.any():
			uart1.readinto(buf)
			code = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3]
			facility = code >> 16
			card = code & 0xFFFF
			callback(code, facility, card)

# run the demo
uart_demo(cb)

# scan my blue EM4100 tag with engraving "0003069055"
Code: 3069055, Facility: 46, Card: 54399

# scan my pink EM4100 tag with engraving "0008123291"
Code: 8123291, Facility: 123, Card: 62363

# scan my yellow EM4100 tag with engraving "0012459289"
Code: 12459289, Facility: 190, Card: 7449
